// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Ephyra-genesis-api/storage/mysql/model"
)

func newUserPointsLog(db *gorm.DB, opts ...gen.DOOption) userPointsLog {
	_userPointsLog := userPointsLog{}

	_userPointsLog.userPointsLogDo.UseDB(db, opts...)
	_userPointsLog.userPointsLogDo.UseModel(&model.UserPointsLog{})

	tableName := _userPointsLog.userPointsLogDo.TableName()
	_userPointsLog.ALL = field.NewAsterisk(tableName)
	_userPointsLog.ID = field.NewInt64(tableName, "id")
	_userPointsLog.UserID = field.NewInt64(tableName, "user_id")
	_userPointsLog.TotalPoints = field.NewInt32(tableName, "total_points")
	_userPointsLog.BasePoints = field.NewInt32(tableName, "base_points")
	_userPointsLog.ExtraPoints = field.NewInt32(tableName, "extra_points")
	_userPointsLog.Type = field.NewString(tableName, "type")
	_userPointsLog.UpdateAt = field.NewTime(tableName, "update_at")
	_userPointsLog.CreateAt = field.NewTime(tableName, "create_at")

	_userPointsLog.fillFieldMap()

	return _userPointsLog
}

type userPointsLog struct {
	userPointsLogDo userPointsLogDo

	ALL         field.Asterisk
	ID          field.Int64  // 用户积分变化日志唯一ID
	UserID      field.Int64  // 用户唯一ID
	TotalPoints field.Int32  // 积分变化
	BasePoints  field.Int32  // 积分变化
	ExtraPoints field.Int32  // 积分变化
	Type        field.String // 积分类型
	UpdateAt    field.Time   // 更新时间
	CreateAt    field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (u userPointsLog) Table(newTableName string) *userPointsLog {
	u.userPointsLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPointsLog) As(alias string) *userPointsLog {
	u.userPointsLogDo.DO = *(u.userPointsLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPointsLog) updateTableName(table string) *userPointsLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.TotalPoints = field.NewInt32(table, "total_points")
	u.BasePoints = field.NewInt32(table, "base_points")
	u.ExtraPoints = field.NewInt32(table, "extra_points")
	u.Type = field.NewString(table, "type")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.CreateAt = field.NewTime(table, "create_at")

	u.fillFieldMap()

	return u
}

func (u *userPointsLog) WithContext(ctx context.Context) *userPointsLogDo {
	return u.userPointsLogDo.WithContext(ctx)
}

func (u userPointsLog) TableName() string { return u.userPointsLogDo.TableName() }

func (u userPointsLog) Alias() string { return u.userPointsLogDo.Alias() }

func (u userPointsLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userPointsLogDo.Columns(cols...)
}

func (u *userPointsLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPointsLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["total_points"] = u.TotalPoints
	u.fieldMap["base_points"] = u.BasePoints
	u.fieldMap["extra_points"] = u.ExtraPoints
	u.fieldMap["type"] = u.Type
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["create_at"] = u.CreateAt
}

func (u userPointsLog) clone(db *gorm.DB) userPointsLog {
	u.userPointsLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPointsLog) replaceDB(db *gorm.DB) userPointsLog {
	u.userPointsLogDo.ReplaceDB(db)
	return u
}

type userPointsLogDo struct{ gen.DO }

func (u userPointsLogDo) Debug() *userPointsLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userPointsLogDo) WithContext(ctx context.Context) *userPointsLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPointsLogDo) ReadDB() *userPointsLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPointsLogDo) WriteDB() *userPointsLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPointsLogDo) Session(config *gorm.Session) *userPointsLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPointsLogDo) Clauses(conds ...clause.Expression) *userPointsLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPointsLogDo) Returning(value interface{}, columns ...string) *userPointsLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPointsLogDo) Not(conds ...gen.Condition) *userPointsLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPointsLogDo) Or(conds ...gen.Condition) *userPointsLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPointsLogDo) Select(conds ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPointsLogDo) Where(conds ...gen.Condition) *userPointsLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPointsLogDo) Order(conds ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPointsLogDo) Distinct(cols ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPointsLogDo) Omit(cols ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPointsLogDo) Join(table schema.Tabler, on ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPointsLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPointsLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPointsLogDo) Group(cols ...field.Expr) *userPointsLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPointsLogDo) Having(conds ...gen.Condition) *userPointsLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPointsLogDo) Limit(limit int) *userPointsLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPointsLogDo) Offset(offset int) *userPointsLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPointsLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userPointsLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPointsLogDo) Unscoped() *userPointsLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPointsLogDo) Create(values ...*model.UserPointsLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPointsLogDo) CreateInBatches(values []*model.UserPointsLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPointsLogDo) Save(values ...*model.UserPointsLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPointsLogDo) First() (*model.UserPointsLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsLog), nil
	}
}

func (u userPointsLogDo) Take() (*model.UserPointsLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsLog), nil
	}
}

func (u userPointsLogDo) Last() (*model.UserPointsLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsLog), nil
	}
}

func (u userPointsLogDo) Find() ([]*model.UserPointsLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPointsLog), err
}

func (u userPointsLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPointsLog, err error) {
	buf := make([]*model.UserPointsLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPointsLogDo) FindInBatches(result *[]*model.UserPointsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPointsLogDo) Attrs(attrs ...field.AssignExpr) *userPointsLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPointsLogDo) Assign(attrs ...field.AssignExpr) *userPointsLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPointsLogDo) Joins(fields ...field.RelationField) *userPointsLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPointsLogDo) Preload(fields ...field.RelationField) *userPointsLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPointsLogDo) FirstOrInit() (*model.UserPointsLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsLog), nil
	}
}

func (u userPointsLogDo) FirstOrCreate() (*model.UserPointsLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsLog), nil
	}
}

func (u userPointsLogDo) FindByPage(offset int, limit int) (result []*model.UserPointsLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPointsLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPointsLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPointsLogDo) Delete(models ...*model.UserPointsLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPointsLogDo) withDO(do gen.Dao) *userPointsLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
