// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Ephyra-genesis-api/storage/mysql/model"
)

func newBadge(db *gorm.DB, opts ...gen.DOOption) badge {
	_badge := badge{}

	_badge.badgeDo.UseDB(db, opts...)
	_badge.badgeDo.UseModel(&model.Badge{})

	tableName := _badge.badgeDo.TableName()
	_badge.ALL = field.NewAsterisk(tableName)
	_badge.ID = field.NewInt64(tableName, "id")
	_badge.Name = field.NewString(tableName, "name")
	_badge.ImageURL = field.NewString(tableName, "image_url")
	_badge.UnlockConditions = field.NewString(tableName, "unlock_conditions")
	_badge.UpdateAt = field.NewTime(tableName, "update_at")
	_badge.CreateAt = field.NewTime(tableName, "create_at")

	_badge.fillFieldMap()

	return _badge
}

type badge struct {
	badgeDo badgeDo

	ALL              field.Asterisk
	ID               field.Int64  // badge id
	Name             field.String // 徽章名称
	ImageURL         field.String // 徽章图片链接
	UnlockConditions field.String // 徽章解锁条件
	UpdateAt         field.Time   // 更新时间
	CreateAt         field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (b badge) Table(newTableName string) *badge {
	b.badgeDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b badge) As(alias string) *badge {
	b.badgeDo.DO = *(b.badgeDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *badge) updateTableName(table string) *badge {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.ImageURL = field.NewString(table, "image_url")
	b.UnlockConditions = field.NewString(table, "unlock_conditions")
	b.UpdateAt = field.NewTime(table, "update_at")
	b.CreateAt = field.NewTime(table, "create_at")

	b.fillFieldMap()

	return b
}

func (b *badge) WithContext(ctx context.Context) *badgeDo { return b.badgeDo.WithContext(ctx) }

func (b badge) TableName() string { return b.badgeDo.TableName() }

func (b badge) Alias() string { return b.badgeDo.Alias() }

func (b badge) Columns(cols ...field.Expr) gen.Columns { return b.badgeDo.Columns(cols...) }

func (b *badge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *badge) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["image_url"] = b.ImageURL
	b.fieldMap["unlock_conditions"] = b.UnlockConditions
	b.fieldMap["update_at"] = b.UpdateAt
	b.fieldMap["create_at"] = b.CreateAt
}

func (b badge) clone(db *gorm.DB) badge {
	b.badgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b badge) replaceDB(db *gorm.DB) badge {
	b.badgeDo.ReplaceDB(db)
	return b
}

type badgeDo struct{ gen.DO }

func (b badgeDo) Debug() *badgeDo {
	return b.withDO(b.DO.Debug())
}

func (b badgeDo) WithContext(ctx context.Context) *badgeDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b badgeDo) ReadDB() *badgeDo {
	return b.Clauses(dbresolver.Read)
}

func (b badgeDo) WriteDB() *badgeDo {
	return b.Clauses(dbresolver.Write)
}

func (b badgeDo) Session(config *gorm.Session) *badgeDo {
	return b.withDO(b.DO.Session(config))
}

func (b badgeDo) Clauses(conds ...clause.Expression) *badgeDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b badgeDo) Returning(value interface{}, columns ...string) *badgeDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b badgeDo) Not(conds ...gen.Condition) *badgeDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b badgeDo) Or(conds ...gen.Condition) *badgeDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b badgeDo) Select(conds ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b badgeDo) Where(conds ...gen.Condition) *badgeDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b badgeDo) Order(conds ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b badgeDo) Distinct(cols ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b badgeDo) Omit(cols ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b badgeDo) Join(table schema.Tabler, on ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b badgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *badgeDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b badgeDo) RightJoin(table schema.Tabler, on ...field.Expr) *badgeDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b badgeDo) Group(cols ...field.Expr) *badgeDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b badgeDo) Having(conds ...gen.Condition) *badgeDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b badgeDo) Limit(limit int) *badgeDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b badgeDo) Offset(offset int) *badgeDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b badgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *badgeDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b badgeDo) Unscoped() *badgeDo {
	return b.withDO(b.DO.Unscoped())
}

func (b badgeDo) Create(values ...*model.Badge) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b badgeDo) CreateInBatches(values []*model.Badge, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b badgeDo) Save(values ...*model.Badge) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b badgeDo) First() (*model.Badge, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Badge), nil
	}
}

func (b badgeDo) Take() (*model.Badge, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Badge), nil
	}
}

func (b badgeDo) Last() (*model.Badge, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Badge), nil
	}
}

func (b badgeDo) Find() ([]*model.Badge, error) {
	result, err := b.DO.Find()
	return result.([]*model.Badge), err
}

func (b badgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Badge, err error) {
	buf := make([]*model.Badge, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b badgeDo) FindInBatches(result *[]*model.Badge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b badgeDo) Attrs(attrs ...field.AssignExpr) *badgeDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b badgeDo) Assign(attrs ...field.AssignExpr) *badgeDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b badgeDo) Joins(fields ...field.RelationField) *badgeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b badgeDo) Preload(fields ...field.RelationField) *badgeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b badgeDo) FirstOrInit() (*model.Badge, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Badge), nil
	}
}

func (b badgeDo) FirstOrCreate() (*model.Badge, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Badge), nil
	}
}

func (b badgeDo) FindByPage(offset int, limit int) (result []*model.Badge, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b badgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b badgeDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b badgeDo) Delete(models ...*model.Badge) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *badgeDo) withDO(do gen.Dao) *badgeDo {
	b.DO = *do.(*gen.DO)
	return b
}
