// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Ephyra-genesis-api/storage/mysql/model"
)

func newUserDailyTaskLog(db *gorm.DB, opts ...gen.DOOption) userDailyTaskLog {
	_userDailyTaskLog := userDailyTaskLog{}

	_userDailyTaskLog.userDailyTaskLogDo.UseDB(db, opts...)
	_userDailyTaskLog.userDailyTaskLogDo.UseModel(&model.UserDailyTaskLog{})

	tableName := _userDailyTaskLog.userDailyTaskLogDo.TableName()
	_userDailyTaskLog.ALL = field.NewAsterisk(tableName)
	_userDailyTaskLog.ID = field.NewInt64(tableName, "id")
	_userDailyTaskLog.UserID = field.NewInt64(tableName, "user_id")
	_userDailyTaskLog.Answer = field.NewString(tableName, "answer")
	_userDailyTaskLog.CurrentDay = field.NewInt32(tableName, "current_day")
	_userDailyTaskLog.Badges = field.NewString(tableName, "badges")
	_userDailyTaskLog.TxHash = field.NewString(tableName, "tx_hash")
	_userDailyTaskLog.Points = field.NewInt32(tableName, "points")
	_userDailyTaskLog.ExtraPoints = field.NewInt32(tableName, "extra_points")
	_userDailyTaskLog.UpdateAt = field.NewTime(tableName, "update_at")
	_userDailyTaskLog.CreateAt = field.NewTime(tableName, "create_at")

	_userDailyTaskLog.fillFieldMap()

	return _userDailyTaskLog
}

type userDailyTaskLog struct {
	userDailyTaskLogDo userDailyTaskLogDo

	ALL         field.Asterisk
	ID          field.Int64  // 用户积分变化日志唯一ID
	UserID      field.Int64  // 用户唯一ID
	Answer      field.String // 用户每日回答
	CurrentDay  field.Int32  // 记录回答问题天数offset，从2025-09-10 开始是第一天
	Badges      field.String // 本次交互用户获取的徽章， jsn list: [1,2,3,4]
	TxHash      field.String // 交易hash
	Points      field.Int32  // 积分变化
	ExtraPoints field.Int32  // 积分变化
	UpdateAt    field.Time   // 更新时间
	CreateAt    field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (u userDailyTaskLog) Table(newTableName string) *userDailyTaskLog {
	u.userDailyTaskLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDailyTaskLog) As(alias string) *userDailyTaskLog {
	u.userDailyTaskLogDo.DO = *(u.userDailyTaskLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDailyTaskLog) updateTableName(table string) *userDailyTaskLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Answer = field.NewString(table, "answer")
	u.CurrentDay = field.NewInt32(table, "current_day")
	u.Badges = field.NewString(table, "badges")
	u.TxHash = field.NewString(table, "tx_hash")
	u.Points = field.NewInt32(table, "points")
	u.ExtraPoints = field.NewInt32(table, "extra_points")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.CreateAt = field.NewTime(table, "create_at")

	u.fillFieldMap()

	return u
}

func (u *userDailyTaskLog) WithContext(ctx context.Context) *userDailyTaskLogDo {
	return u.userDailyTaskLogDo.WithContext(ctx)
}

func (u userDailyTaskLog) TableName() string { return u.userDailyTaskLogDo.TableName() }

func (u userDailyTaskLog) Alias() string { return u.userDailyTaskLogDo.Alias() }

func (u userDailyTaskLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userDailyTaskLogDo.Columns(cols...)
}

func (u *userDailyTaskLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDailyTaskLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["answer"] = u.Answer
	u.fieldMap["current_day"] = u.CurrentDay
	u.fieldMap["badges"] = u.Badges
	u.fieldMap["tx_hash"] = u.TxHash
	u.fieldMap["points"] = u.Points
	u.fieldMap["extra_points"] = u.ExtraPoints
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["create_at"] = u.CreateAt
}

func (u userDailyTaskLog) clone(db *gorm.DB) userDailyTaskLog {
	u.userDailyTaskLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDailyTaskLog) replaceDB(db *gorm.DB) userDailyTaskLog {
	u.userDailyTaskLogDo.ReplaceDB(db)
	return u
}

type userDailyTaskLogDo struct{ gen.DO }

func (u userDailyTaskLogDo) Debug() *userDailyTaskLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userDailyTaskLogDo) WithContext(ctx context.Context) *userDailyTaskLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDailyTaskLogDo) ReadDB() *userDailyTaskLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDailyTaskLogDo) WriteDB() *userDailyTaskLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDailyTaskLogDo) Session(config *gorm.Session) *userDailyTaskLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDailyTaskLogDo) Clauses(conds ...clause.Expression) *userDailyTaskLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDailyTaskLogDo) Returning(value interface{}, columns ...string) *userDailyTaskLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDailyTaskLogDo) Not(conds ...gen.Condition) *userDailyTaskLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDailyTaskLogDo) Or(conds ...gen.Condition) *userDailyTaskLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDailyTaskLogDo) Select(conds ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDailyTaskLogDo) Where(conds ...gen.Condition) *userDailyTaskLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDailyTaskLogDo) Order(conds ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDailyTaskLogDo) Distinct(cols ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDailyTaskLogDo) Omit(cols ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDailyTaskLogDo) Join(table schema.Tabler, on ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDailyTaskLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDailyTaskLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDailyTaskLogDo) Group(cols ...field.Expr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDailyTaskLogDo) Having(conds ...gen.Condition) *userDailyTaskLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDailyTaskLogDo) Limit(limit int) *userDailyTaskLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDailyTaskLogDo) Offset(offset int) *userDailyTaskLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDailyTaskLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDailyTaskLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDailyTaskLogDo) Unscoped() *userDailyTaskLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDailyTaskLogDo) Create(values ...*model.UserDailyTaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDailyTaskLogDo) CreateInBatches(values []*model.UserDailyTaskLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDailyTaskLogDo) Save(values ...*model.UserDailyTaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDailyTaskLogDo) First() (*model.UserDailyTaskLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyTaskLog), nil
	}
}

func (u userDailyTaskLogDo) Take() (*model.UserDailyTaskLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyTaskLog), nil
	}
}

func (u userDailyTaskLogDo) Last() (*model.UserDailyTaskLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyTaskLog), nil
	}
}

func (u userDailyTaskLogDo) Find() ([]*model.UserDailyTaskLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDailyTaskLog), err
}

func (u userDailyTaskLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDailyTaskLog, err error) {
	buf := make([]*model.UserDailyTaskLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDailyTaskLogDo) FindInBatches(result *[]*model.UserDailyTaskLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDailyTaskLogDo) Attrs(attrs ...field.AssignExpr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDailyTaskLogDo) Assign(attrs ...field.AssignExpr) *userDailyTaskLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDailyTaskLogDo) Joins(fields ...field.RelationField) *userDailyTaskLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDailyTaskLogDo) Preload(fields ...field.RelationField) *userDailyTaskLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDailyTaskLogDo) FirstOrInit() (*model.UserDailyTaskLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyTaskLog), nil
	}
}

func (u userDailyTaskLogDo) FirstOrCreate() (*model.UserDailyTaskLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyTaskLog), nil
	}
}

func (u userDailyTaskLogDo) FindByPage(offset int, limit int) (result []*model.UserDailyTaskLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDailyTaskLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDailyTaskLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDailyTaskLogDo) Delete(models ...*model.UserDailyTaskLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDailyTaskLogDo) withDO(do gen.Dao) *userDailyTaskLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
