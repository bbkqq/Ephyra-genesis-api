// Code generated by hertz generator.

package main

import (
	"Ephyra-genesis-api/biz/dal"
	"Ephyra-genesis-api/biz/jobs"
	"Ephyra-genesis-api/pkg/cron_job"
	"context"
	"fmt"
	"os"
	"time"

	"Ephyra-genesis-api/biz/router"
	"Ephyra-genesis-api/conf"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func init() {
	loc, err := time.LoadLocation("UTC")
	if err != nil {
		fmt.Println("Failed to set UTC+0 timezone:", err)
		panic(err)
	}
	// 设置全局时区
	time.Local = loc
}
func main() {

	// init cancel context
	ctx, cancel := context.WithCancel(context.Background())
	defer func() {
		cancel()
	}()

	//init dal
	dal.Init()

	address := conf.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})

	router.GeneratedRegister(h)

	if os.Getenv("RUN_CRONJOB") == "1" {
		runCronJobs(ctx)
	}
	
	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cors 配置跨域
	corsConfig := cors.Config{
		AllowAllOrigins:  true,
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Length", "Content-Type", "Authorization"},
		AllowCredentials: false,
		MaxAge:           12 * time.Hour,
		AllowWildcard:    false,
	}
	h.Use(cors.New(corsConfig))
}

func runCronJobs(ctx context.Context) {

	answerEventListenerJob := cron_job.NewCronJob(jobs.NewAnswerEventListenerJob())
	go answerEventListenerJob.Run(ctx)

	weeklyRankingJob := cron_job.NewCronJob(jobs.NewWeeklyRankingJob())
	go weeklyRankingJob.Run(ctx)
}
